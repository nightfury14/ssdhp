*****PART 39******
Select Name, Salary, Gender, DepartmentName
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID

# create a view, using the JOINS query
 Create View vWEmployeesByDepartment
as
Select  Name, Salary, Gender, DepartmentName
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID

#To select data from the view
SELECT * from vWEmployeesByDepartment

#View that returns only IT department employees:
Create View vWITDepartment_Employees
as
Select Name, Salary, Gender, DepartmentName
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID
where tblDepartment.DepartmentName = 'IT'

Select * from vWITDepartment_Employees

#View that returns all columns except Salary column:
Create View vWEmployeesNonConfidentialData
as
Select  Name, Gender, DepartmentName
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID

Select * from vWEmployeesNonConfidentialData

#View that returns summarized data
Create View vWEmployeesCountByDepartment
as
Select DepartmentName, COUNT(tblemployee.ID) as TotalEmployees
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID
Group By DepartmentName

Select * from vWEmployeesCountByDepartment

#To look at view definition - sp_helptext vWEmployeesCountByDepartment
#To modify a view - ALTER VIEW statement 
#To Drop a view - DROP VIEW vWName

*******PART 40******
#create a view table
Create view vWEmployeesDataExceptSalary
as
Select Id, Name, Gender, DepartmentId
from tblEmployee

#Execute
Select * from vWEmployeesDataExceptSalary

#Update the following query
Update vWEmployeesDataExceptSalary 
Set Name = 'Mikey' Where Id = 2

#delete the values from  view table
Delete from vWEmployeesDataExceptSalary where Id = 2

#Insert values in the view table
Insert into vWEmployeesDataExceptSalary values (2, 'Mikey', 'Male', 2)

#View that joins tblEmployee and tblDepartment
Create view vwEmployeeDetailsByDepartment
as
Select Name, Salary, Gender, DepartmentName
from tblEmployee
join tblDepartment
on tblEmployee.DepartmentId = tblDepartment.ID

#Select Data from view vwEmployeeDetailsByDepartment
Select * from vwEmployeeDetailsByDepartment

*******PART 41*******
#Create a product table
Create Table tblProduct
(
 ProductId int primary key,
 Name nvarchar(20),
 Price int
)

#Values of the table
Insert into tblProduct Values(1, 'Nail Paint', 150)
Insert into tblProduct Values(2, 'BabyLips', 175)
Insert into tblProduct Values(3, 'Eyelinear', 120)
Insert into tblProduct Values(4, 'Kajal', 130)

#ProductSales
Create Table tblProductSales
(
 ProductId int,
 QuantitySold int
)

#Values of the Productsales
Insert into tblProductSales values(1, 10)
Insert into tblProductSales values(3, 23)
Insert into tblProductSales values(4, 21)
Insert into tblProductSales values(2, 12)
Insert into tblProductSales values(1, 13)
Insert into tblProductSales values(3, 12)
Insert into tblProductSales values(4, 13)
Insert into tblProductSales values(1, 11)
Insert into tblProductSales values(2, 12)

#create view vWTotalSalesByProduct
Create view vWTotalSalesByProduct
with SchemaBinding
as
Select Name, 
SUM(ISNULL((QuantitySold * Price), 0)) as TotalSales, 
COUNT_BIG(*) as TotalTransactions
from dbo.tblProductSales
join dbo.tblProduct
on dbo.tblProduct.ProductId = dbo.tblProductSales.ProductId
group by Name

# create an Index on the view
Create Unique Clustered Index UIX_vWTotalSalesByProduct_Name
on vWTotalSalesByProduct(Name)

execute Select * from vWTotalSalesByProduct

Insert into tblProductSales values(1, 14)

*******PART 42******
-- Error : Cannot pass Parameters to Views
Create View vWEmployeeDetails
@Gender nvarchar(20)
as
Select Id, Name, Gender, DepartmentId
from  tblEmployee
where Gender = @Gender

#Table Valued functions can be used as a replacement for parameterized views.
Create function fnEmployeeDetails(@Gender nvarchar(20))
Returns Table
as
Return 
(Select Id, Name, Gender, DepartmentId
from tblEmployee where Gender = @Gender)

#Calling the function
Select * from dbo.fnEmployeeDetails('Male')

#The ORDER BY clause is invalid in views unless TOP or FOR XML is also specified.
Create View vWEmployeeDetailsSorted
as
Select Id, Name, Gender, DepartmentId
from tblEmployee
order by Id
##If you use ORDER BY, you will get an error stating - 'The ORDER BY clause is invalid in views, inline functions, derived tables, subqueries, and common table expressions, unless TOP or FOR XML is also specified.'

# Views cannot be based on temporary tables.
Create Table ##TestTempTable(Id int, Name nvarchar(20), Gender nvarchar(10))

Insert into ##TestTempTable values(101, 'Martin', 'Male')
Insert into ##TestTempTable values(102, 'Joe', 'Female')
Insert into ##TestTempTable values(103, 'Pam', 'Female')
Insert into ##TestTempTable values(104, 'James', 'Male')

-- Error: Cannot create a view on Temp Tables
Create View vwOnTempTable
as
Select Id, Name, Gender
from ##TestTempTable