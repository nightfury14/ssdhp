*******PART 63*******
Declare @ProductId int

-- Declare the cursor using the declare keyword
Declare ProductIdCursor CURSOR FOR 
Select ProductId from tblProductSales

-- Open statement, executes the SELECT statment
-- and populates the result set
Open ProductIdCursor

-- Fetch the row from the result set into the variable
Fetch Next from ProductIdCursor into @ProductId

-- If the result set still has rows, @@FETCH_STATUS will be ZERO
While(@@FETCH_STATUS = 0)
Begin
 Declare @ProductName nvarchar(50)
 Select @ProductName = Name from tblProduct where ProductId = @ProductId
 
 if(@ProductName = 'Product - 55')
 Begin
  Update tblProductSales set Price = 55 where ProductId = @ProductId
 End
 else if(@ProductName = 'Product - 65')
 Begin
  Update tblProductSales set Price = 65 where ProductId = @ProductId
 End
 else if(@ProductName like 'Product - 100%')
 Begin
  Update tblProductSales set Price = 1000 where ProductId = @ProductId
 End
 
 Fetch Next from ProductIdCursor into @ProductId 
End

-- Release the row set
CLOSE ProductIdCursor 
-- Deallocate, the resources associated with the cursor
DEALLOCATE ProductIdCursor

Select  Name, Price 
from tblProduct join
tblProductSales on tblProduct.ProductId = tblProductSales.ProductId
where (Name='Kajal' or Name='Eyelinear' or Name like 'Baby Lips')

Select * from tblProduct
Select * from tblProductSales

*******PART 64*******
Update tblProductSales
set QuantitySold = 
 Case 
  When Name = 'Kajal' Then 155
  When Name = 'Eyelinear' Then 165
  When Name like 'Baby Lips' Then 10001
 End     
from tblProductSales
join tblProduct
on tblProduct.ProductId = tblProductSales.ProductId
Where Name = 'Kajal' or Name = 'Eyelinear' or 
Name like 'Baby Lips'

Select  Name,QuantitySold from 
tblProduct join
tblProductSales on tblProduct.ProductId = tblProductSales.ProductId
where (Name='Kajal' or Name='Eyelinear' or 
Name like 'Baby Lips')


*******PART 65*******
-- Gets the list of tables only
Select * from SYSOBJECTS where XTYPE='U'
-- Gets the list of tables only
Select * from  SYS.TABLES
-- Gets the list of tables and views
Select * from INFORMATION_SCHEMA.TABLES

#To get the list of different object types (XTYPE) in a database
Select Distinct XTYPE from SYSOBJECTS


*******PART 66*******
#Use [Sample]
#If not exists (select * from information_schema.tables where table_name = 'tblEmployee')
Begin
 Create table tblEmployee
 (
  ID int identity primary key,
  Name nvarchar(100),
  Gender nvarchar(10),
  DateOfBirth DateTime
 )
 Print 'Table tblEmployee successfully created'
End
Else
Begin
 Print 'Table tblEmployee already exists'
End

#Sql server built-in function OBJECT_ID(), can also be used to check for the existence of the table
IF OBJECT_ID('tblEmployee') IS NULL
Begin
   -- Create Table Script
   Print 'Table tblEmployee created'
End
Else
Begin
   Print 'Table tblEmployee already exists'
End

#Col_length() function can also be used to check for the existence of a column
If col_length('tblEmployee','Email') is not null
Begin
 Print 'Column already exists'
End
Else
Begin
 Print 'Column does not exist'
End

*******PART 67*******
Alter table tblEmployee
Alter column Salary int


*******PART 68*******
#Create Proc spSearchEmployees
@Name nvarchar(50) = NULL,
@Email nvarchar(50) = NULL,
@Salary int = NULL,
@Gender nvarchar(50) = NULL
as
Begin
 Select * from tblEmployee where
 (Name = @Name OR @Name IS NULL) AND
 (Email = @Email OR @Email IS NULL) AND
 (Salary = @Salary OR @Salary IS NULL) AND
 (Gender = @Gender OR @Gender IS NULL) 
End

#Execute
Execute spSearchEmployees 
Execute spSearchEmployees @Gender = 'Male'
 Execute spSearchEmployees @Gender = 'Male', @Salary = 30000 
